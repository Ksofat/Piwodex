paths:
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Nickname
                - Email
                - Password
                - UserType
              properties:
                Nickname:
                  type: string
                Email:
                  type: string
                Password:
                  type: string
                UserType:
                  type: string
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Server error

    get:
      tags:
        - Users
      summary: Retrieve all users
      responses:
        200:
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Server error

  /users/login:
    post:
      tags:
        - Users
      summary: Authenticate a user and return user details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Email
                - Password
              properties:
                Email:
                  type: string
                Password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: Invalid credentials
        404:
          description: User not found
        500:
          description: Server error

  /users/{id}:
    get:
      tags:
        - Users
      summary: Retrieve a single user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Server error

    put:
      tags:
        - Users
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated successfully
        500:
          description: Server error

    delete:
      tags:
        - Users
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User deleted successfully
        500:
          description: Server error

components:
  schemas:
    User:
      type: object
      properties:
        UserID:
          type: integer
        Nickname:
          type: string
        Email:
          type: string
        CreatedDate:
          type: string
          format: date-time
        UserType:
          type: string

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: '#/components/schemas/User'